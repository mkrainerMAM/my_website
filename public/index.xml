<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Portfolio website of Marie Krainer</title>
    <link>/</link>
    <description>Recent content on Portfolio website of Marie Krainer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Oct 2017 22:42:51 -0500</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Trump vs. Clinton</title>
      <link>/blogs/aliquam/</link>
      <pubDate>Tue, 31 Oct 2017 22:42:51 -0500</pubDate>
      
      <guid>/blogs/aliquam/</guid>
      <description>Importing and cleaning the data:
# Import approval polls data approval_polllist &amp;lt;- read_csv(here::here(&#39;data&#39;,&#39;approval_polllist.csv&#39;)) # or directly off fivethirtyeight website # approval_polllist &amp;lt;- read_csv(&#39;https://projects.fivethirtyeight.com/trump-approval-data/approval_polllist.csv&#39;) glimpse(approval_polllist) # Use `lubridate` to fix dates, as they are given as characters. approval_polllist_clean &amp;lt;- approval_polllist %&amp;gt;% filter(subgroup==&amp;quot;Voters&amp;quot;)%&amp;gt;% mutate(modeldate = mdy(modeldate), startdate = mdy(startdate), enddate=mdy(enddate), createddate=mdy(createddate), timestamp=parse_date_time(timestamp, orders=&amp;quot;HMSdmy&amp;quot;) ) glimpse(approval_polllist_clean) Estimating net approval for Donald Trump:
library(aplot) library(scales) #this library is used to adapt the graph to the requirements given on the picture library(ggThemeAssist) plot_trump &amp;lt;- approval_polllist_clean %&amp;gt;% mutate (net_approval_rate = (adjusted_approve - adjusted_disapprove), end_week = week(enddate), year =year(enddate)) %&amp;gt;% group_by(year, end_week) %&amp;gt;% summarize(mean_net = mean(net_approval_rate)) %&amp;gt;% ungroup() #dataset for calculating CI for each week per months CI_plot &amp;lt;- approval_polllist_clean %&amp;gt;% mutate (net_approval_rate = (adjusted_approve - adjusted_disapprove), end_week = week(enddate), year =year(enddate)) %&amp;gt;% group_by(year, end_week) %&amp;gt;% summarize(mean_net = mean(net_approval_rate), std_trump = sd(net_approval_rate), stan_error_trump = std_trump/sqrt(count(end_week)), t_critical = qt(0.</description>
    </item>
    
    <item>
      <title>Tempus</title>
      <link>/blogs/tempus/</link>
      <pubDate>Tue, 31 Oct 2017 22:26:13 -0500</pubDate>
      
      <guid>/blogs/tempus/</guid>
      <description>CA_contributors_2016 &amp;lt;- vroom::vroom(here::here(&amp;ldquo;data&amp;rdquo;,&amp;ldquo;CA_contributors_2016.csv&amp;rdquo;)) zipcodes_2016 &amp;lt;- vroom::vroom(here::here(&amp;ldquo;data&amp;rdquo;,&amp;ldquo;zip_code_database.csv&amp;rdquo;))
 As we have seen that the zipcodes in the zipcodes file are stored as characters. We first had to transform them into doubles to match the format of the zipcodes in the CA_contributors. In order to match zipcodes to the cities and so combine both datasets, we used left_join and called the final dataset &#39;mix&#39;. We now filtered for Trump and Clinton respectively and made a list of the top 10 cities that donated the most money.</description>
    </item>
    
    <item>
      <title>Brexit</title>
      <link>/blogs/magna/</link>
      <pubDate>Tue, 31 Oct 2017 22:26:09 -0500</pubDate>
      
      <guid>/blogs/magna/</guid>
      <description>We will first have a look at the Brexit dataframe.
knitr::include_graphics(here::here(&amp;quot;images&amp;quot;, &amp;quot;brexit.png&amp;quot;), error = FALSE) We will now replicate the graph from above.
#importing dataframe brexit library(skimr) library(ggplot2) brexit_results &amp;lt;- vroom::vroom(here::here(&amp;quot;data&amp;quot;, &amp;quot;brexit_results.csv&amp;quot;)) skim(brexit_results) summary(brexit_results) #adding column called party to link all parties brexit_long &amp;lt;- gather(brexit_results, party, percentage, con_2015:ukip_2015, factor_key=TRUE) #building our graph with ggplot ggplot(brexit_long, aes(x = percentage ,y=leave_share, color = party))+ geom_point(size = 2, alpha=0.5) + geom_smooth(method = lm) + labs(title = &amp;quot;How political affiliation translated to Brexit Voting&amp;quot;, x = &amp;quot;Party % in the UK 2015 general election&amp;quot;, y = &amp;quot;Leave % in the 2016 Brexit referendum&amp;quot;) + scale_x_discrete(expand=c(0.</description>
    </item>
    
    <item>
      <title>Ipsum</title>
      <link>/blogs/ipsum/</link>
      <pubDate>Tue, 31 Oct 2017 21:28:43 -0500</pubDate>
      
      <guid>/blogs/ipsum/</guid>
      <description>Covid death rate % by age group, sex, and whether the patient had co-morbidities or not:
#removing missing and unknown values val_to_remove=c(&amp;quot;Missing&amp;quot;, &amp;quot;Unknown&amp;quot;, &amp;quot;Other&amp;quot;, NA) death_rate_medcond &amp;lt;- covid_data %&amp;gt;% select(medcond_yn, death_yn, sex, age_group) %&amp;gt;% #removing missing and unknown values filter(!(death_yn %in% val_to_remove) , !(medcond_yn %in% val_to_remove), !(sex %in% val_to_remove), !(age_group %in% val_to_remove), ) %&amp;gt;% #assigning more meaningful names to variable medcond_yn mutate(death_bool = ifelse(death_yn==&amp;quot;Yes&amp;quot;, 1, 0), co_mor= ifelse(medcond_yn==&amp;quot;Yes&amp;quot;, &amp;quot;With comorbidities&amp;quot;, &amp;quot;Without comorbidities&amp;quot;)) %&amp;gt;% group_by(age_group, sex, co_mor) %&amp;gt;% summarise(death_r = prop(death_bool)) ggplot(death_rate_medcond, aes(x=death_r, y=age_group)) + geom_col(fill=&amp;quot;#1b5596&amp;quot;, alpha=0.</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>/post/2015-07-23-r-rmarkdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/post/2015-07-23-r-rmarkdown/</guid>
      <description>R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.
You can embed an R code chunk like this:
summary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.</description>
    </item>
    
  </channel>
</rss>